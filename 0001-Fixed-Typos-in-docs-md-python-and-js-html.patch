From 02276c4933d1d884f6c952ba4e664f75b577e695 Mon Sep 17 00:00:00 2001
From: Bhanu Pratap <pratap.bhanu3434@gmail.com>
Date: Tue, 26 May 2020 03:47:55 +0530
Subject: [PATCH] Fixed Typos in docs/md/python and js html

---
 docs/md/js.md     | 131 ++++++++++++++++++++++++++--------------------
 docs/md/python.md |  25 +++++----
 2 files changed, 85 insertions(+), 71 deletions(-)

diff --git a/docs/md/js.md b/docs/md/js.md
index d6df2150..5c448b2a 100644
--- a/docs/md/js.md
+++ b/docs/md/js.md
@@ -75,9 +75,9 @@ handle everything for you:
 
 ```javascript
 // Assume that new ticks are delivered via websocket
-websocket.onmessage = function(event) {
+websocket.onmessage = function (event) {
   viewer.update(event.data);
-}
+};
 ```
 
 ### Configuring `perspective-viewer`
@@ -91,7 +91,8 @@ different visualization on load or transform the dataset, use the viewer's attri
   id="view1"
   plugin="xy_scatter"
   columns='["Sales", "Profits"]'
-  row_pivots='["State", "City"]'>
+  row_pivots='["State", "City"]'
+>
 </perspective-viewer>
 ```
 
@@ -119,14 +120,14 @@ and must be imported individually.
 
 Perspective offers these plugin modules:
 
-- `@finos/perspective-viewer-d3fc`  
+- `@finos/perspective-viewer-datagrid`  
   A custom high-performance data-grid component based on HTML `<table>`.
 
 - `@finos/perspective-viewer-d3fc`  
   A `<perspective-viewer>` plugin for the [d3fc](https://d3fc.io) charting
   library.
 
-Also available are these legacy modules;  though no longer under development,
+Also available are these legacy modules; though no longer under development,
 they are compatible with perspective versions < 1.0.0:
 
 - `@finos/perspective-viewer-hypergrid`  
@@ -154,6 +155,7 @@ modules. Some basic guidelines to help you decide what is most appropriate for
 your project:
 
 - For Perspective as a simple, browser-based data visualization widget, import:
+
   - `@finos/perspective-viewer`, detailed [here](#perspective-viewer-web-component)
   - `@finos/perspective-viewer-datagrid` for data grids
   - `@finos/perspective-viewer-d3fc` for charting
@@ -162,6 +164,7 @@ your project:
 
 - For Perspective's high-performance streaming data engine (in WebAssembly), or
   for a purely Node.js based application, import:
+
   - `@finos/perspective`, as detailed [here](#perspective-library)
 
 - For more complex cases, such as
@@ -189,15 +192,15 @@ It exports Perspective's data interfaces:
 
 `@finos/perspective` also exports process management functions such as
 `worker()` and `websocket()` (in the browser) and `WebSocketServer()`
-(in node.js). See the [API documentation](/obj/perspective.html) for a complete 
+(in node.js). See the [API documentation](/obj/perspective.html) for a complete
 reference on all exported methods.
 
-This module is a dependency of `@finos/perspective-viewer`, and is not needed if 
+This module is a dependency of `@finos/perspective-viewer`, and is not needed if
 you only intend to use `<perspective-viewer>` to visualize simple data.
 
 ### Importing in the browser
 
-`perspective` can be imported as an ES6 module and/or `require` syntax if you're 
+`perspective` can be imported as an ES6 module and/or `require` syntax if you're
 using a bundler such as Webpack (and the `@finos/perspective-webpack-plugin`):
 
 ```javascript
@@ -222,7 +225,7 @@ const perspective = require("@finos/perspective");
 
 Once imported, you'll need to instantiate a `perspective` engine via the
 `worker()` method. This will create a new WebWorker (browser) or
-Process (Node.js), and load the WebAssembly binary; all calculation and data 
+Process (Node.js), and load the WebAssembly binary; all calculation and data
 accumulation will occur in this separate process.
 
 ```javascript
@@ -257,14 +260,14 @@ var data = [
   { x: 1, y: "a", z: true },
   { x: 2, y: "b", z: false },
   { x: 3, y: "c", z: true },
-  { x: 4, y: "d", z: false }
+  { x: 4, y: "d", z: false },
 ];
 
 const table1 = worker.table(data);
 ```
 
 `table()`s are columnar data structures, and each column must have a single
-type. When passing data directly to the `table()` constructor, the type of each 
+type. When passing data directly to the `table()` constructor, the type of each
 column is inferred automatically.
 
 Perspective supports the following types:
@@ -288,13 +291,13 @@ In these cases, create a `table()` with a _schema_:
 var schema = {
   x: "integer",
   y: "string",
-  z: "boolean"
+  z: "boolean",
 };
 
 const table2 = worker.table(schema);
 ```
 
-Once instatiated, a `table()` can be updated with new data via the `update()` 
+Once instatiated, a `table()` can be updated with new data via the `update()`
 method:
 
 ```javascript
@@ -314,10 +317,13 @@ table:
 
 ```javascript
 // Use the 'x' column as a primary key
-const table3 = worker.table({
-  x: [1, 2, 3, 4],
-  y: ["a", "b", "c", "d"]
-}, { index: "x" });
+const table3 = worker.table(
+  {
+    x: [1, 2, 3, 4],
+    y: ["a", "b", "c", "d"],
+  },
+  { index: "x" }
+);
 ```
 
 If an index is set, the `update()` method uses the index to _replace_ or
@@ -327,14 +333,14 @@ _append_ rows:
 // Replace the values at index 1 and 4
 table3.update({
   x: [1, 4],
-  y: ["new1", "new2"]
+  y: ["new1", "new2"],
 });
 
 // append these rows, as the value in `x` is not an existing primary key
 table3.update({
   x: [5, 6],
-  y: ["e", "f"]
-})
+  y: ["e", "f"],
+});
 ```
 
 #### Row limits via `limit`
@@ -376,7 +382,7 @@ table.update([{ x: 3, y: "Just Y" }]);
 
 #### Deleting rows with `remove()`
 
-Rows can be removed entirely from a `table()` with `index` set. Call the 
+Rows can be removed entirely from a `table()` with `index` set. Call the
 `remove()` method with a list of the `index` values to be removed:
 
 ```javascript
@@ -398,7 +404,7 @@ const view = table.view({
   columns: ["Sales"],
   aggregates: { Sales: "sum" },
   row_pivot: ["Region", "Country"],
-  filter: [["Category", "in", ["Furniture", "Technology"]]]
+  filter: [["Category", "in", ["Furniture", "Technology"]]],
 });
 ```
 
@@ -417,10 +423,10 @@ methods return a `promise` for the calculated data:
 
 ```javascript
 // Via standard `promise`
-view.to_json().then(json => console.log(json));
-view.to_columns().then(json => console.log(json));
-view.to_csv().then(csv => console.log(csv));
-view.to_arrow().then(arrow => console.log(arrow));
+view.to_json().then((json) => console.log(json));
+view.to_columns().then((json) => console.log(json));
+view.to_csv().then((csv) => console.log(csv));
+view.to_arrow().then((arrow) => console.log(arrow));
 
 // Via ES6 await/async
 console.log(await view.to_json());
@@ -499,16 +505,16 @@ configuration object to the `worker()` constructor on initialization.
 module.exports = {
   types: {
     string: {
-      aggregate: "dominant"
+      aggregate: "dominant",
     },
     float: {
       format: {
         style: "decimal",
         minimumFractionDigits: 2,
-        maximumFractionDigits: 2
-      }
-    }
-  }
+        maximumFractionDigits: 2,
+      },
+    },
+  },
 };
 ```
 
@@ -521,8 +527,8 @@ First, add a new type and declare its base in your `perspective.config.js`:
 ```javascript
 module.exports = {
   types: {
-    price: { type: "float" }
-  }
+    price: { type: "float" },
+  },
 };
 ```
 
@@ -547,11 +553,11 @@ module.exports = {
       format: {
         style: "decimal",
         minimumFractionDigits: 2,
-        maximumFractionDigits: 2
-      }
-    }
-  }
-}
+        maximumFractionDigits: 2,
+      },
+    },
+  },
+};
 ```
 
 ## `perspective-viewer` web component
@@ -606,7 +612,7 @@ import "@finos/perspective-viewer/themes/material-dense.dark.css";
 import "@finos/perspective-viewer/themes/vaporwave.css";
 ```
 
-***Note that importing multiple themes may override each other***
+**_Note that importing multiple themes may override each other_**
 
 Alternatively, you may use `all-themes.css`, which exposes all available
 themes as CSS classes. This allows you to trivially apply different themes
@@ -623,11 +629,17 @@ import "@finos/perspective-viewer/themes/all-themes.css";
 _*index.html*_
 
 ```html
-<perspective-viewer class='perspective-viewer-material'></perspective-viewer>
-<perspective-viewer class='perspective-viewer-material-dark'></perspective-viewer>
-<perspective-viewer class='perspective-viewer-material-dense'></perspective-viewer>
-<perspective-viewer class='perspective-viewer-material-dense-dark'></perspective-viewer>
-<perspective-viewer class='perspective-viewer-vaporwave'></perspective-viewer>
+<perspective-viewer class="perspective-viewer-material"></perspective-viewer>
+<perspective-viewer
+  class="perspective-viewer-material-dark"
+></perspective-viewer>
+<perspective-viewer
+  class="perspective-viewer-material-dense"
+></perspective-viewer>
+<perspective-viewer
+  class="perspective-viewer-material-dense-dark"
+></perspective-viewer>
+<perspective-viewer class="perspective-viewer-vaporwave"></perspective-viewer>
 ```
 
 If you choose not to bundle the themes yourself, they are available through
@@ -636,7 +648,10 @@ the [unpkg.com](https://unpkg.com/@finos/perspective-viewer/dist/umd/).
 These can be directly linked in your HTML:
 
 ```html
-<link rel="stylesheet" href="https://unpkg.com/@finos/perspective-viewer/dist/umd/material.css"/>
+<link
+  rel="stylesheet"
+  href="https://unpkg.com/@finos/perspective-viewer/dist/umd/material.css"
+/>
 ```
 
 ### Loading data into `<perspective-viewer>`
@@ -651,12 +666,12 @@ provided
 has loaded:
 
 ```javascript
-document.addEventListener("WebComponentsReady", function() {
+document.addEventListener("WebComponentsReady", function () {
   var data = [
     { x: 1, y: "a", z: true },
     { x: 2, y: "b", z: false },
     { x: 3, y: "c", z: true },
-    { x: 4, y: "d", z: false }
+    { x: 4, y: "d", z: false },
   ];
 
   var viewer = document.getElementById("view1");
@@ -807,22 +822,22 @@ _*index.html*_
 <perspective-viewer id="viewer" editable></perspective-viewer>
 
 <script>
-    window.addEventListener('WebComponentsReady', async function() {
-        // Create a client that expects a Perspective server
-        // to accept connections at the specified URL.
-        const websocket = perspective.websocket("ws://localhost:8888/websocket");
+  window.addEventListener("WebComponentsReady", async function () {
+    // Create a client that expects a Perspective server
+    // to accept connections at the specified URL.
+    const websocket = perspective.websocket("ws://localhost:8888/websocket");
 
-        /* `table` is a proxy for the `Table` we created on the server.
+    /* `table` is a proxy for the `Table` we created on the server.
 
         All operations that are possible through the Javascript API are possible
         on the Python API as well, thus calling `view()`, `schema()`, `update()`
         etc. on `const table` will pass those operations to the Python `Table`,
         execute the commands, and return the result back to Javascript.*/
-        const table = websocket.open_table('data_source_one');
+    const table = websocket.open_table("data_source_one");
 
-        // Load this in the `<perspective-viewer>`.
-        document.getElementById('viewer').load(table);
-    });
+    // Load this in the `<perspective-viewer>`.
+    document.getElementById("viewer").load(table);
+  });
 </script>
 ```
 
@@ -884,7 +899,7 @@ Similarly, `view()` updates instigated either through the Attribute API or
 through user interaction will fire a `perspective-config-update` event:
 
 ```javascript
-elem.addEventListener("perspective-config-update", function() {
+elem.addEventListener("perspective-config-update", function () {
   var config = elem.save();
   console.log("The view() config has changed to " + JSON.stringify(config));
 });
@@ -904,7 +919,7 @@ The `column_names` property contains an array of matching columns and the `row`
 property returns the associated row data.
 
 ```javascript
-elem.addEventListener("perspective-click", function(event) {
+elem.addEventListener("perspective-click", function (event) {
   var config = event.detail.config;
   elem.restore(config);
 });
diff --git a/docs/md/python.md b/docs/md/python.md
index 615d9c34..c1b2769b 100644
--- a/docs/md/python.md
+++ b/docs/md/python.md
@@ -51,7 +51,6 @@ commonly used when processing data:
 
 - `pandas.DataFrame`
 - `numpy.ndarray`
-- `numpy.ndarray`
 - `bytes` (encoding an Apache Arrow)
 - `objects` (either extracting a repr or via reference)
 
@@ -90,7 +89,7 @@ arrays, make sure that your dataset contains only NumPy arrays, and not a
 mixture of arrays and Python lists — this will raise an exception. Numpy
 structured/record arrays are parsed according to their field name and dtype.
 
-`Table` can aslo be constructed from `pandas.DataFrame` and `pandas.Series`
+`Table` can also be constructed from `pandas.DataFrame` and `pandas.Series`
 objects. Because Perspective is designed for applying its own transformations on
 top of a flat dataset, dataframes that are passed in will be flattened and have
 its `index` treated as another column (through the
@@ -145,7 +144,7 @@ Additionally, when loading a custom object into perspective, there are several o
   - `_psp_repr_`: Since `__repr__` can only return strings, this lets you return other values
   - `_psp_dtype_`: perpspective will look at this to determine how to cast your objects' repr
   - if you use `object` in schema, or have `_psp_dtype_` return `object`, we will store a reference
-  to your object as an unsigned 64 bit integer (e.g. a pointer)
+    to your object as an unsigned 64 bit integer (e.g. a pointer)
 
 #### Time Zone Handling
 
@@ -290,22 +289,22 @@ _*index.html*_
 <perspective-viewer id="viewer" editable></perspective-viewer>
 
 <script>
-    window.addEventListener('WebComponentsReady', async function() {
-        // Create a client that expects a Perspective server
-        // to accept connections at the specified URL.
-        const websocket = perspective.websocket("ws://localhost:8888/websocket");
+  window.addEventListener("WebComponentsReady", async function () {
+    // Create a client that expects a Perspective server
+    // to accept connections at the specified URL.
+    const websocket = perspective.websocket("ws://localhost:8888/websocket");
 
-        /* `table` is a proxy for the `Table` we created on the server.
+    /* `table` is a proxy for the `Table` we created on the server.
 
         All operations that are possible through the Javascript API are possible
         on the Python API as well, thus calling `view()`, `schema()`, `update()`
         etc. on `const table` will pass those operations to the Python `Table`,
         execute the commands, and return the result back to Javascript.*/
-        const table = websocket.open_table('data_source_one');
+    const table = websocket.open_table("data_source_one");
 
-        // Load this in the `<perspective-viewer>`.
-        document.getElementById('viewer').load(table);
-    });
+    // Load this in the `<perspective-viewer>`.
+    document.getElementById("viewer").load(table);
+  });
 </script>
 ```
 
@@ -334,7 +333,7 @@ MANAGER.host_view("view_one", VIEW)
 # Continue with Tornado setup
 ```
 
-Changes to the client code are also minimal. Use `open_view` instead of 
+Changes to the client code are also minimal. Use `open_view` instead of
 `open_table`:
 
 ```javascript
-- 
2.25.1

