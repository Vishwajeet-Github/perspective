// ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
// ┃ ██████ ██████ ██████       █      █      █      █      █ █▄  ▀███ █       ┃
// ┃ ▄▄▄▄▄█ █▄▄▄▄▄ ▄▄▄▄▄█  ▀▀▀▀▀█▀▀▀▀▀ █ ▀▀▀▀▀█ ████████▌▐███ ███▄  ▀█ █ ▀▀▀▀▀ ┃
// ┃ █▀▀▀▀▀ █▀▀▀▀▀ █▀██▀▀ ▄▄▄▄▄ █ ▄▄▄▄▄█ ▄▄▄▄▄█ ████████▌▐███ █████▄   █ ▄▄▄▄▄ ┃
// ┃ █      ██████ █  ▀█▄       █ ██████      █      ███▌▐███ ███████▄ █       ┃
// ┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫
// ┃ Copyright (c) 2017, the Perspective Authors.                              ┃
// ┃ ╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌ ┃
// ┃ This file is part of the Perspective library, distributed under the terms ┃
// ┃ of the [Apache License 2.0](https://www.apache.org/licenses/LICENSE-2.0). ┃
// ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

import type { IPerspectiveViewerElement } from "./viewer";
import type { HTMLPerspectiveViewerPluginElement } from "./plugin";
import type React from "react";

import { WASM_MODULE } from "./init";

// JSX / React extensions

type ReactPerspectiveViewerAttributes<T> = React.HTMLAttributes<T>;

type JsxPerspectiveViewerElement = { class?: string } & React.DetailedHTMLProps<
    ReactPerspectiveViewerAttributes<HTMLPerspectiveViewerElement>,
    HTMLPerspectiveViewerElement
>;

declare global {
    namespace JSX {
        interface IntrinsicElements {
            "perspective-viewer": JsxPerspectiveViewerElement;
        }
    }
}

// Custom Elements extensions

declare global {
    interface Document {
        createElement(
            tagName: "perspective-viewer",
            options?: ElementCreationOptions
        ): HTMLPerspectiveViewerElement;
        createElement(
            tagName: "perspective-viewer-plugin",
            options?: ElementCreationOptions
        ): HTMLPerspectiveViewerPluginElement;
        createElement(
            tagName: "perspective-export-menu",
            options?: ElementCreationOptions
        ): HTMLExportDropDownMenuElement;
        createElement(
            tagName: "perspective-copy-menu",
            options?: ElementCreationOptions
        ): HTMLCopyDropDownMenuElement;
        querySelector<E extends Element = Element>(selectors: string): E | null;
        querySelector(
            selectors: "perspective-viewer"
        ): HTMLPerspectiveViewerElement | null;
        querySelector(
            selectors: "perspective-export-menu"
        ): HTMLExportDropDownMenuElement | null;
        querySelector(
            selectors: "perspective-copy-menu"
        ): HTMLCopyDropDownMenuElement | null;
    }

    interface CustomElementRegistry {
        get(tagName: "perspective-viewer"): typeof HTMLPerspectiveViewerElement;
        get(
            tagName: "perspective-viewer-plugin"
        ): typeof HTMLPerspectiveViewerPluginElement;
        get(
            tagName: "perspective-export-menu"
        ): typeof HTMLExportDropDownMenuElement;
        get(
            tagName: "perspective-copy-menu"
        ): typeof HTMLCopyDropDownMenuElement;
    }
}

import {
    CopyDropDownMenuElement,
    ExportDropDownMenuElement,
    PerspectiveViewerElement,
} from "../../dist/pkg/perspective.js";

// This unused class asserts that the _real_ class (the one generated by
// `wasm-bindgen`) implements the same interface we register to the
// custom element.
//
class __PerspectiveViewerElement
    extends PerspectiveViewerElement
    implements IPerspectiveViewerElement {}

class __ExportDropDownMenuElement
    extends ExportDropDownMenuElement
    implements IExportDropDownMenuElement {}

class __CopyDropDownMenuElement
    extends CopyDropDownMenuElement
    implements ICopyDropDownMenuElement {}

/**
 * @noInheritDoc
 */
export interface HTMLPerspectiveViewerElement
    extends IPerspectiveViewerElement {}

export declare class HTMLPerspectiveViewerElement
    extends HTMLElement
    implements IPerspectiveViewerElement
{
    /**
     * Register a new plugin via its custom element name.  This method is called
     * automatically as a side effect of importing a plugin module, so this
     * method should only typically be called by plugin authors.
     *
     * @category Plugin
     * @param name The `name` of the custom element to register, as supplied
     * to the `customElements.define(name)` method.
     * @example
     * ```javascript
     * customElements.get("perspective-viewer").registerPlugin("my-plugin");
     * ```
     */
    static registerPlugin(name: string): Promise<void>;

    /**
     * Get metadata for ExprTK's supported commands.
     *
     * @category Internal
     * @returns An array of JSON descriptors for ExprTK commands
     */
    static getExprtkCommands(): Promise<Array<Record<string, string>>>;
}

// TODO: move all this to Workspace?? How?
export interface IExportDropDownMenuElement {
    open(target: HTMLElement);
    hide();

    /**
     * Set the raw pointer to the `<perspective-viewer>` WASM model, such that
     * it may be passed back to WASM function calls that take a
     * `PerspectiveViewerElement` as an argument.
     *
     * @category Internal
     * @returns The pointer to use for the model.
     */
    unsafeSetModel(ptr: number);
}

// This unused class asserts that the _real_ class (the one generated by
// `wasm-bindgen`) implements the same interface we register to the
// custom element.
//

export interface HTMLExportDropDownMenuElement
    extends IExportDropDownMenuElement {}

export class HTMLExportDropDownMenuElement extends HTMLElement {
    _instance: ExportDropDownMenuElement;
    constructor() {
        super();
        this.__load_wasm();
    }

    async __load_wasm() {
        await WASM_MODULE;
        if (this._instance === undefined) {
            this._instance = new ExportDropDownMenuElement(this);
        }
    }
}

// TODO: move all this to Workspace (How?)
//          Or to where the viewer .d.ts is??
export interface ICopyDropDownMenuElement {
    // TODO docs
    open(target: HTMLElement);
    hide();

    /**
     * Set the raw pointer to the `<perspective-viewer>` WASM model, such that
     * it may be passed back to WASM function calls that take a
     * `PerspectiveViewerElement` as an argument.
     *
     * @category Internal
     * @param ptr The pointer to use for the model.
     */
    unsafeSetModel(ptr: number);
}

export interface HTMLCopyDropDownMenuElement extends ICopyDropDownMenuElement {}

export class HTMLCopyDropDownMenuElement extends HTMLElement {
    _instance: CopyDropDownMenuElement;
    constructor() {
        super();
        this.__load_wasm();
    }

    async __load_wasm() {
        await WASM_MODULE;
        if (this._instance === undefined) {
            this._instance = new CopyDropDownMenuElement(this);
        }
    }
}
